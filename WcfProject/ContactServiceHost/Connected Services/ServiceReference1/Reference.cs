//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactServiceHost.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertData", ReplyAction="http://tempuri.org/IService1/InsertDataResponse")]
        bool InsertData(WcfProject.Employee1 obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertData", ReplyAction="http://tempuri.org/IService1/InsertDataResponse")]
        System.Threading.Tasks.Task<bool> InsertDataAsync(WcfProject.Employee1 obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAll", ReplyAction="http://tempuri.org/IService1/ShowAllResponse")]
        WcfProject.Employee1[] ShowAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowAll", ReplyAction="http://tempuri.org/IService1/ShowAllResponse")]
        System.Threading.Tasks.Task<WcfProject.Employee1[]> ShowAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRecordbyId", ReplyAction="http://tempuri.org/IService1/GetRecordbyIdResponse")]
        WcfProject.Employee1[] GetRecordbyId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRecordbyId", ReplyAction="http://tempuri.org/IService1/GetRecordbyIdResponse")]
        System.Threading.Tasks.Task<WcfProject.Employee1[]> GetRecordbyIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateData", ReplyAction="http://tempuri.org/IService1/UpdateDataResponse")]
        bool UpdateData(WcfProject.Employee1 obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateData", ReplyAction="http://tempuri.org/IService1/UpdateDataResponse")]
        System.Threading.Tasks.Task<bool> UpdateDataAsync(WcfProject.Employee1 obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteData", ReplyAction="http://tempuri.org/IService1/DeleteDataResponse")]
        bool DeleteData(WcfProject.Employee1 obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteData", ReplyAction="http://tempuri.org/IService1/DeleteDataResponse")]
        System.Threading.Tasks.Task<bool> DeleteDataAsync(WcfProject.Employee1 obj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ContactServiceHost.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ContactServiceHost.ServiceReference1.IService1>, ContactServiceHost.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertData(WcfProject.Employee1 obj) {
            return base.Channel.InsertData(obj);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDataAsync(WcfProject.Employee1 obj) {
            return base.Channel.InsertDataAsync(obj);
        }
        
        public WcfProject.Employee1[] ShowAll() {
            return base.Channel.ShowAll();
        }
        
        public System.Threading.Tasks.Task<WcfProject.Employee1[]> ShowAllAsync() {
            return base.Channel.ShowAllAsync();
        }
        
        public WcfProject.Employee1[] GetRecordbyId(int id) {
            return base.Channel.GetRecordbyId(id);
        }
        
        public System.Threading.Tasks.Task<WcfProject.Employee1[]> GetRecordbyIdAsync(int id) {
            return base.Channel.GetRecordbyIdAsync(id);
        }
        
        public bool UpdateData(WcfProject.Employee1 obj) {
            return base.Channel.UpdateData(obj);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDataAsync(WcfProject.Employee1 obj) {
            return base.Channel.UpdateDataAsync(obj);
        }
        
        public bool DeleteData(WcfProject.Employee1 obj) {
            return base.Channel.DeleteData(obj);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDataAsync(WcfProject.Employee1 obj) {
            return base.Channel.DeleteDataAsync(obj);
        }
    }
}
